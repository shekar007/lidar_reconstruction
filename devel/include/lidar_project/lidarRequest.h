// Generated by gencpp from file lidar_project/lidarRequest.msg
// DO NOT EDIT!


#ifndef LIDAR_PROJECT_MESSAGE_LIDARREQUEST_H
#define LIDAR_PROJECT_MESSAGE_LIDARREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lidar_project
{
template <class ContainerAllocator>
struct lidarRequest_
{
  typedef lidarRequest_<ContainerAllocator> Type;

  lidarRequest_()
    : centerX(0)
    , centerY(0)  {
    }
  lidarRequest_(const ContainerAllocator& _alloc)
    : centerX(0)
    , centerY(0)  {
  (void)_alloc;
    }



   typedef int64_t _centerX_type;
  _centerX_type centerX;

   typedef int64_t _centerY_type;
  _centerY_type centerY;





  typedef boost::shared_ptr< ::lidar_project::lidarRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lidar_project::lidarRequest_<ContainerAllocator> const> ConstPtr;

}; // struct lidarRequest_

typedef ::lidar_project::lidarRequest_<std::allocator<void> > lidarRequest;

typedef boost::shared_ptr< ::lidar_project::lidarRequest > lidarRequestPtr;
typedef boost::shared_ptr< ::lidar_project::lidarRequest const> lidarRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lidar_project::lidarRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lidar_project::lidarRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lidar_project::lidarRequest_<ContainerAllocator1> & lhs, const ::lidar_project::lidarRequest_<ContainerAllocator2> & rhs)
{
  return lhs.centerX == rhs.centerX &&
    lhs.centerY == rhs.centerY;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lidar_project::lidarRequest_<ContainerAllocator1> & lhs, const ::lidar_project::lidarRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lidar_project

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::lidar_project::lidarRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lidar_project::lidarRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lidar_project::lidarRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lidar_project::lidarRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lidar_project::lidarRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lidar_project::lidarRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lidar_project::lidarRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "85578d4a6a7df81c0c963f713c5c5d68";
  }

  static const char* value(const ::lidar_project::lidarRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x85578d4a6a7df81cULL;
  static const uint64_t static_value2 = 0x0c963f713c5c5d68ULL;
};

template<class ContainerAllocator>
struct DataType< ::lidar_project::lidarRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lidar_project/lidarRequest";
  }

  static const char* value(const ::lidar_project::lidarRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lidar_project::lidarRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 centerX\n"
"int64 centerY\n"
;
  }

  static const char* value(const ::lidar_project::lidarRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lidar_project::lidarRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.centerX);
      stream.next(m.centerY);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct lidarRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lidar_project::lidarRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lidar_project::lidarRequest_<ContainerAllocator>& v)
  {
    s << indent << "centerX: ";
    Printer<int64_t>::stream(s, indent + "  ", v.centerX);
    s << indent << "centerY: ";
    Printer<int64_t>::stream(s, indent + "  ", v.centerY);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LIDAR_PROJECT_MESSAGE_LIDARREQUEST_H
